generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(cuid())
  email                String               @unique
  username             String               @unique
  clerkId              String               @unique
  name                 String?
  bio                  String?
  image                String?
  location             String?
  website              String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  isCompany            Boolean              @default(false)
  categories           String[]
  backgroundImage      String?
  profileViews         Int                  @default(0)
  comments             Comment[]
  CompanyServiceArea   CompanyServiceArea[]
  feedbacks            Feedback[]           @relation("userFeedbacks")
  following            Follows[]            @relation("follower")
  followers            Follows[]            @relation("following")
  likes                Like[]
  notificationsCreated Notification[]       @relation("notificationCreator")
  notifications        Notification[]       @relation("userNotifications")
  posts                Post[]
  reviewsWritten       Review[]             @relation("ReviewsWritten")
  reviewsReceived      Review[]             @relation("ReviewsReceived")
}

model Post {
  id            String         @id @default(cuid())
  authorId      String
  content       String?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  companyId String
  author    User     @relation("ReviewsWritten", fields: [authorId], references: [id], onDelete: Cascade)
  company   User     @relation("ReviewsReceived", fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([authorId, companyId])
  @@index([companyId, createdAt])
}

model Comment {
  id            String         @id @default(cuid())
  content       String
  authorId      String
  postId        String
  createdAt     DateTime       @default(now())
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, postId])
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

model Feedback {
  id        String   @id @default(cuid())
  content   String
  email     String?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation("userFeedbacks", fields: [userId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean          @default(false)
  postId    String?
  commentId String?
  createdAt DateTime         @default(now())
  comment   Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  creator   User             @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User             @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model CompanyRequest {
  id             String   @id @default(cuid())
  name           String
  industry       String
  contactName    String
  contactEmail   String
  phone          String?
  website        String?
  description    String
  sustainability String?
  createdAt      DateTime @default(now())
}

model Commune {
  id                 String               @id
  name               String
  regionId           String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  Region             Region               @relation(fields: [regionId], references: [id], onDelete: Cascade)
  CompanyServiceArea CompanyServiceArea[]

  @@unique([name, regionId])
  @@index([regionId])
}

model CompanyServiceArea {
  id        String    @id @default(cuid())
  companyId String
  scope     ScopeType @default(COUNTRY)
  regionId  String?
  communeId String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Commune   Commune?  @relation(fields: [communeId], references: [id], onDelete: Cascade)
  User      User      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Region    Region?   @relation(fields: [regionId], references: [id], onDelete: Cascade)

  @@index([communeId])
  @@index([companyId])
  @@index([regionId])
}

model Region {
  id                 String               @id
  name               String               @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  Commune            Commune[]
  CompanyServiceArea CompanyServiceArea[]
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}

enum ScopeType {
  COUNTRY
  REGION
  COMMUNE
}
